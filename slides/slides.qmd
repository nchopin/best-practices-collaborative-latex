---
title: Best practices for (collaborative) LaTeX
author: 
    - name: Nicolas Chopin
      email: nicolas.chopin@ensae.fr
institute: ENSAE, IPP 
execute:
    eval: false
format:
  beamer:
    theme: AnnArbor
    colortheme: crane
    incremental: true
    slide-level: 2
  revealjs:
    theme: solarized
    incremental: true
    slide-level: 2
---

# Introduction

## Target audience

PhD students: 

* who are a bit familiar with LaTeX (typically through Overleaf)

* who need to write **scientific papers** and submit them (arxiv, journal, ML conf)

* jointly with other authors (e.g., the grumpy PhD advisor)

## My perspective

* A 50y mathematician who had to use LaTeX since his first paper (and pulled
  his hair out a few times over it).

* big fan of open source, mostly for **practical** reasons. 

## A few words about Overleaf

I am not here to tell you which tool to use or not. Consider the following points however:

* Do you regularly back up your files? What if 
  + you cannot login (no connexion, the site is down, etc.)
  + the company goes bust
  + Overleaf *enshitiffies*

* Is running an editor *inside* your browser a good idea? (e.g., keyboard
  shortcuts)

* Is sending an overleaf link to co-authors out of the blue is really polite? 

## A few words about your PhD

PhD = 3 years to reflect on the **tools** (and workflow) for the rest of your
career.


# Preliminaries

## What is going on?

![](figs/bad_encoding.png){width=60%}


## Text files and encodings

LaTeX source files are **text files**, with no meta-data, in 
particular no specification of which **encoding** you use. 

* Encoding: Characters $\Rightarrow$  numbers (codes)

* Decoding: Numbers $\Rightarrow$ Characters

* ASCII: one of the first (and still widely used) encoding; a character = 
  7 bits, works only for US English (no \pounds{} symbol).

* Latin-1 (ISO 8859-1): superset of ASCII, a character = 8 bits = 1 byte, works
  for European languages.

* UTF-8 (unicode): now the recommended standard; superset of ASCII, a character
  may takes from 1 to 3 bytes.  

## ASCII table

![](figs/ascii_table.png){width=70%}

## Rise of UTF-8

![](figs/rise_of_utf8.png){width=70%, fig-align="right"}

## Encoding in practice in latex

Make sure that:

1. Your text editor is in UTF-8 mode.

2. Your tex file includes:
   ```{latex}
    \usepackage[utf8]{inputenc} % encoding for input (this file)
    \usepackage[T1]{fontenc} % font encoding (output)
    \usepackage{lmodern} % better fonts
   ```

. . . 

You need **BOTH**.

## Further notes on encodings

* UTF-8  became the standard encoding in 2018. However, keep the `inputenc`
  command to be safe.

* Of course, when you write in English, encoding is less of an issue, but you
  might need to quote names with accents: Bézout theorem, Hölder inequality,
  Césaro theorem, Lévy processes, etc.

* You can also enter accents in LaTeX like this: `\'e`, `\'e`, `\"a`, see
  section on bibtex

## Paper size

* A4 (210 mm $\times$ 297 mm): the most standard paper size everywhere... 

* except in the US, Canada, ... where they use the letter format (215.9 mm $\times$ 279.4 mm)

* Unfortunately, LaTeX still defaults to the letter format. Keep this in mind for your thesis. 

* Not an issue for journal papers.

## Style guides in computer languages

Several computer languages (e.g., Python, see PEP 8) have strong conventions
about:

* indentation

* blank lines

* hard wrapping

* ...

. . . 

All these conventions are here to make the code more **readable**.

. . .

See also this ENSAE [course](https://ensae-reproductibilite.github.io/website/).

## Style guide for LaTeX? 

Not so clear, but still recommended to use white space **liberally** to make your
code readable:

* in-line math: `$(x + 1)^2 = x^2 + 2x + 1$`.

* environments: `\begin{}` and `\end{}` on a separate lines, indendation inside
  block:
  ```{latex}
  \begin{equation}\label{eq:average}
    \widehat{\theta}_n = \frac{1}{n} \sum_{i=1}^n X_i
  \end{equation}
  ```

* blank lines between paragraphs (**NOT** `\\ `).

* one (or two) blank line(s) before/after `\section{...}`.

* Hard wrapping at least for equations.


## Markdown

May replace latex, especially for slides. 


```{markdown}
---
title: My course
name: Toto
institute: University of Oxbridge
---

# First slide

* First point: $(x + 1)^2 = x^2 + 2x + 1$

* Second point: I can also add an equation:
  $$ (x + 1)^3 = x^3 + 3 x^2  + 3 x + 1$$

# Second slide

I would like to *emphasise* this **very important** list.
```

## Markdown => LaTeX

You can convert Markdown to LaTeX using the command-line tool [pandoc](https://pandoc.org/).

. . . 

Or, better, use [quarto](https://quarto.org/) (which relies on `pandoc`) to
write:

* slides (and compile them directly into pdf, or html)

* your web-site
   
* a blog 

* etc. 

## See also

[typst](https://typst.app/)

# LaTeX: history, main concepts

## History

:::: {.columns }

::: {.column width="68%"}

* 1977: [Donald Knuth](https://fr.wikipedia.org/wiki/Donald_Knuth),
  disappointed by the galley proofs of the 2nd ed. of *The art of computer
  programming*, set to design his own typesetting system, **TeX**. 

:::

::: {.column width="29%"}


<center>
<img src="figs/DonaldKnuth.jpg" width="62%" align="middle">
</center>

:::

::: {.column width="68%"}

* 1984: first release of LaTeX, a set of TeX macros by 
  [Leslie Lamport](https://en.wikipedia.org/wiki/Leslie_Lamport) (The
  corresponding book sold $\mathcal{O}(10^5)$ copies.)

:::

::: {.column width="29%"}

<center>
<img src="figs/Leslie_Lamport.jpg" width="62%" align="middle">
</center>

:::

::::


* 1994: release of LaTeX-$2\varepsilon$, the *current* version.


## Practical consequences

* Avoid tex directives in LaTeX, they are too **low-level**. (We will give
  examples later.)


* LaTeX is pretty old. It stood the test of times, but it has also its quirks:
  + designed before UTF-8 was a thing (see above)

  + very verbose

  + debugging is **not fun**: error messages are **cryptic**, and even when it
    runs without error messages, it may be hard to understand why you did get
    the desired result. 

. . .

**Recommendation**: compile very often, to catch errors early.

## Main concept behind TeX / LaTeX

**Separate contents from formatting**

In practice, don't bother about formatting until the very end of the writing
process.

. . . 

Even then, you should not spend too much time on it. This will be taken care by
the journal at the end of the line. 

## LaTeX commands

When we say LaTeX, we mean both:

1. The language

2. the "compilers" (latex, pdflatex, luatex, etc.)

. . . 

These days, most people use `pdflatex` which does: tex -> pdf. This implies
that all the images we want to include are in pdf (or png, jpeg) format.

. . .

A few years ago, it was still common to do tex -> dvi -> ps through `latex`,
then `dvips` (Using images in ps or eps format).


# LaTeX: math

## The AMS packages

AMS = American Mathematical Association.

```{latex}
\usepackage{amsmath} % main AMS package
\usepackage{amsthm} % theorems (must define your own theorem envs)
\usepackage{amssymb} % math symbols, e.g. \mathbb{R}
\usepackage{amsfonts} % better fonts for math
\usepackage{mathtools} % extends amsmath (e.g. \eqcolon)
```

Essential packages, the rest of this section assumes they are used.

## In-line math

```{latex}
$ log L(x) = log f(x) + ..., f(x) := exp(-\frac{x^2}{2})$
```

Q: What's wrong with this? 

* `log`, `exp` should be `\log`, `\exp`; see next slide on **math operators**;

* grammatical commas, dots, should be **outside**

* avoid if possible fractions in in-line math (too little vertical space)

* Replace `:=` by `\coloneq` and `...` by `\dots` (see macros)

. . .

```{latex}
$ \log L(x) = \log f(x) + \dots$, $f(x) \coloneq \exp(-x^2 / 2)$
```
## Math Operators

* LaTeX name for functions, e.g. `\sin`, `\exp`, or other words that appear in
  math such as `\lim`, `\arg`, `\max`. Note: argmax is `\arg\max`. 

* Without the backlash: wrong font and wrong spacings; $sin\theta$ vs
  $\sin\theta$.

* You can define your own operators like this
  ```{latex}
  \DeclareMathOperator{\sinc}{sinc}
  ```

. . . 

Better than using `\newcommand` directly. See the
[amsmath](https://ctan.org/pkg/amsmath) doc for more details on operators
(e.g., options).

## Parentheses, brackets, curly brackets

$$ \pi(x) \propto \exp(f(x))$$

Q: What's wrong with it? 

. . . 

Try to avoid sequences of identical delimiters:

1. Use $[ \{ ( \dots ) \} ]$. 

2. or use `\left( ... \right)` for scaled parentheses.

3. **Tip**: you can also set the scale manually with `\big(`, `\Big(`,
   `\bigg(` and `\Bigg(`. Useful for multi-line eqs.


## Single-line equations (un-labelled)

```{latex}
$$\hat{\theta}_n = \frac{1}{n}\sum_{i=1}^n \left(x_i - \bar{x}\right)^2$$
```
Q: What's wrong with this? 

. . .

`$$...$$` is a TeX (low-level) command; use instead 
```{latex}
\[ \hat{\theta}_n = \frac{1}{n}\sum_{i=1}^n \left(x_i - \bar{x}\right)^2
\]
```
or 
```{latex}
\begin{equation*} 
  \hat{\theta}_n = \frac{1}{n}\sum_{i=1}^n \left(x_i - \bar{x}\right)^2
\end{equation*}
```

Otherwise, wrong spacings, and some options may not work (e.g., `lefteqn`).

## Equations and paragraphs

Q: Should we put a blank line before/after an equation? 

. . .

* A blank line in LaTeX means a new paragraph. 

* You should **never** start a new paragraph with an equation. $\Rightarrow$
  no blank line before.

* **If** your paragraph ends with an equation, put a blank line after;
  don't forget to put a dot at the end of the equation. 

. . . 

```{latex}
To conclude, we have that:
\begin{equation}
  E = MC^2.
\end{equation}

Start of next paragraph...
```

## Multi-line equations

You need mainly **one** environment for multi-line equations:
```{latex}
\begin{align*}
    f(x) & = x + 3 + \int_0^1 f(t) dt \\
         & = z - 5 + \sin(2\pi v)  \\
         & \qquad - \sum_{k=0}^\infty u_k + \exp\{ g(z) - \widehat{g}(z) \}
\end{align*}
```

\begin{align*}
    f(x) & = x + 3 + \int_0^1 f(t) dt \\
         & = z - 5 + \sin(2\pi v)  \\
         & \qquad - \sum_{k=0}^\infty u_k + \exp\{ g(z) - \widehat{g}(z) \}
\end{align*}

## Alternatives

* un-starred version `\begin{align} ... \end{align}` to get labels. Use
  `\nonumber` on a given line if you don't want that line to be labelled.

* To get a single label for the whole equation:
  ```{latex}
  \begin{equation}\label{eq:the_whole_equation}
    \begin{split}
      f(x) & = x + 3 + \int_0^1 f(t) dt \nonumber \\
           & = z - 5 - \\
           & \quad - \sum_{k=0}^\infty u_k
    \end{split}
  \end{equation}
  ```

* **DO NOT** use deprecated environments like `eqnarray` (more complicated to
  use, bad spacing).

## Another multi-line environment that is sometimes useful

```{latex}
\begin{multline}
  f(x) = \int_0^x \sin(3 y)  \exp\{ - 3 y x\} \mathrm{d}y \\
         + \sum_{k} \log(x-k) - \prod_{i=1}^7 \exp(-i)
\end{multline}
```

\begin{multline}
  f(x) = \int_0^x \sin(3 y)  \exp\{ - 3 y x\} \mathrm{d}y \\
         + \sum_{k} \log(x-k) - \prod_{i=1}^7 \exp(-i)
\end{multline}
First line flushed left, last line flushed right, other lines centered.

## Theorem environments

The package `amsthm` does not actually define any theorem environments, you
need to define yours. For instance, 

```{latex}
\newtheorem{thm}{Theorem}
\newtheorem{cor}{Corollary}
\newtheorem{prop}{Proposition}
\newtheorem{lem}{Lemma}
\newtheorem{rem}{Remark}
```

## Theorems bis

Then you can state your theorems like this:

```{latex}
\begin{theorem}[La Palice]
  For any $x>0$, we have $x^2>0$. 
\end{theorem}
```

The part in `[La Palice]` is optional.

## Proofs

There is a `proof` environment: use it.

```{latex}
\begin{proof}
  Obvious.
\end{proof}
```

. . .

\begin{proof}
  Obvious.
\end{proof}

## Text in equations

To write text in equations, use... `\text`:
```{latex}
\[
   x^2 > 0, \text{for all} x >0
\]
```


## Integrals

To get a thin space between function and integral, and a roman d:
```{latex}
\newcommand*\dd{\mathop{}\!\mathrm{d}}

$\int_0^1 f(x) \dd x
```

which gives: $\int_0^1 f(x)\mathop{}\!\mathrm{d}x$.


# LaTeX: macros

## Basics

Macro = user-defined command. 
```{latex}
\newcommand{\R}{\mathbb{R}}  % set of real numbers
```

. . . 

Macros are **tricky** in collaborative settings. When you want to define a macro:

* Make sure that a similar macro has not already been defined by one of your
  co-authors. 

* Try to make it as **readable** as possible: a good macro is **semantic**. 

* Don't hesitate to add a comment as above.

## Macros: motivation

* Saving a few keystrokes? **bad reason**. For this, use editor features such
  as completion, snippets, etc.

* Ensuring **consistency**? **Good reason**. 


## Examples of good semantics (already defined)

|Macro       | Better than   | means       | Example      |
|------------|---------------|-------------|--------------|
| `\emph`    | `\textit`     | Emphasis    | *unbiased*   |
| `\to`      | `\rightarrow` | limit       | As $x \to 0$ |
| `\gets`    | `\leftarrow`  | gets        | $x \gets 0$  |
| `\implies` | `\Rightarrow` | implies     | $\implies$   |
| `\top`     | `x^T`         | matrix transpose | $A^{\top}$ |
| `\dots`    | `\cdots`, `\ldots` | ellipsis | $x=1, \dots, n$ |


## Example of a very bad macro

```{latex}
 \newcommand{\pf}{\begin{proof}} % hide structure behind ridiculous macro
```

. . .

Use this only if you hate your co-authors.

## Renewcommand

It's possible to re-define existing commands:
```{latex}
 \renewcommand{\P}{\mathbb{P}} % Probability symbol
```

. . .

Just don't. Again, readability.


# LaTeX: cross-references (and spaces)

## Basics

You can refer to: an equation, a figure, a table, a section, a sub-section, a
chapter, ...

. . .

To do so, you put a label like this:
```{latex}
\section{Introduction}\label{sec:intro}
```

. . .

and then you refer to it later using command `\ref{sec:intro}`.

## References are tricky

```{latex}
See (\ref{variance}) in Sect. \ref{variance2} for.. 
```

Q: What's wrong with this? 

. . .

* Missing unbreakable spaces:
  ```{latex}
  See~(\ref{variance}) in Sect.~\ref{variance2} for...
  ```

* Recommended to name labels according to their types (originates from package
  `fancyref`, but useful even if you don't use it):
  ```{latex}
  See~(\ref{eq:variance}) in Sect.~\ref{sec:variance} for... 
  ```

* Better to use `\eqref` to refer to an equation: 
  ```{latex}
  See~\eqref{eq:variance} in Sect.~\ref{sec:variance} for ... 
  ```

## Recommended prefixes for labels

| Type    | prefix |
|---------|--------|
| equation| eq     |
| figure  | fig    |
| table   | tab    |
| section | sec    |
| subsection | sub |
| sub-sub-section   | sss |
| chapter | chap   |

## My recommendation

Use package `cleveref`. To write, e.g. "See Figure X", use: 
```{latex}
See \cref{fig:boxplot}
``` 
. . .

This way:

* you don't forget unbreakable spaces; 

* you ensure consistency among authors for the word `Figure` (i.e., Figure or
  figure, or Fig., or fig.)

* `cleveref` does not require labels such as `fig:name`, or `sec:name`, but
  still recommended to increase readability. 

## Cleveref caveats

* Remember to use `\Cref` instead of `\cref` at the beginning of a sentence.

* By default, `cleveref` prints "Eq. (3)" for an equation, but in various areas
  of maths, it is more common to simply put "(3)". In that case, simply use
  `\eqref{eq:variance}` instead. If you do so, you may have to insert unbreakable
  spaces manually.

* Avoid starting a sentence with just an equation label:  Equation (3) shows
  clearly that...

## Hyperref

PDF files may include hyper-links, like [this](). Every labelled item may
become a hyper-link if you use package `hyperref`.

```{latex}
\usepackage{hyperref}
\usepackage{cleveref} % must be loaded *after* hyperref, because reasons
```


## More on unbreakable spaces

`cleveref` takes care of unbreakable spaces for numbered parts, e.g. Sect. 3,
however you may need to insert unbreakable spaces manually in various other places:

```{latex}
This problem is intractable in dimension~$d \geq 2$. 
```

## Other types of spaces

Whenever LaTeX encounters a dot, it inserts an **inter-sentence** (=big) space.
This is problematic for abbreviations.

* **TIP**:To deal with "i.e." and "e.g.", put a comma next to it: *an estimator
  such as, e.g., the MLE...*. No inter-sentence space, and stylistically better
  (apparently).


# LaTeX: Algorithms

## Popular packages

1. [algpseudocodex](https://ctan.org/pkg/algpseudocodex), most recent avatar of
   packages such as `algpseudocode`, `algorithmicx`, etc. 

2. [algorithm2e](https://ctan.org/pkg/algorithm2e)

. . . 

I use the latter personally.

# LaTeX: figures and images

## In one slide 


```{latex}
\usepackage{graphicx}


\begin{figure} 
  \begin{center}
    \includegraphics[scale=0.4]{figs/boxplot_first_method}
  \end{center}
  \caption{This is a nice boxplot.}
  \label{fig:boxplot_first}
\end{figure}
```
. . .

**Important**: **ALWAYS PUT CAPTION FIRST, LABEL SECOND**. 
See [this](http://www.terminally-incoherent.com/blog/2007/04/14/latex-fixing-wrong-figure-numbers/) 
blog post.

## Figure files

* You can omit the file extension (pdf, png, ...). This way, LaTeX will try to
  choose the right format. 

* Spaces and multiple dots not allowed in file names.

## Folder for figures

* Good practice to put all figures in folder `figs/`. You can also use
  sub-folders (e.g., for chapters).

* It's possible to specify the figure folder like this:
  ```{latex}
  \graphicspath{ {./figs/} } % path relative to main tex file
  ```
  but honestly, it's equally easier to write `figs/...` in each
  `\includegraphics{}` command.

* don't use absolute paths: will not work for your co-authors.

# LaTeX: misc

## Multi-file documents

You may want to split your document in multiple files:

* optional for papers (but useful, see git section)

* essential for PhD thesis. 

. . .

Use `\input{part.tex}` in your main file to include the contents of
`part.tex`.

. . . 

Note: LaTeX has also another command, `\include{}` which does almost the same
thing, but it also adds a page break.

## Documents in French (or other languages)

```{latex}
\usepackage[french]{babel}
```
will adapt the typography, and translate words such as abstract, chapter, etc. 


* guillemets: `\og{} text \fg{}`


## Documents mixing several languages (your PhD thesis)

```{latex}
\usepackage[french, english]{babel}
...

Yo, what's up? 

\selectlanguage{french}
Wesh!
```


# Bibliography: bibtex and friends

## Bibtex entries

To cite papers, you need to create a `*.bib` file, which contains entries such as:

```{latex}
@book{book_sasha,
    AUTHOR = {Tsybakov, Alexandre B.},
     TITLE = {Introduction to nonparametric estimation},
    SERIES = {Springer Series in Statistics},
      YEAR = {2009},
       DOI = {10.1007/b13794},
}
```

. . .

The entry name is yours to choose. 

. . .

Most important entry types: `book`, `article`, `inproceedings`.

## Bibtex quirks

* understands only ASCII. You must input accents like this: `\'e`, `\^e` `\"a`, etc.

* Caps in titles must be "protected". Very annoying!

. . .

```{latex}
@article {MR4277333,
    AUTHOR = {Leluc, R\'emi and Portier, Fran\c cois and Segers, Johan},
     TITLE = {Control variate selection for {M}onte {C}arlo integration},
   JOURNAL = {Stat. Comput.},
  FJOURNAL = {Statistics and Computing},
    VOLUME = {31},
      YEAR = {2021},
    NUMBER = {4},
     PAGES = {Paper No. 50, 27},
      ISSN = {0960-3174,1573-1375},
   MRCLASS = {62J07 (65C05)},
  MRNUMBER = {4277333},
       DOI = {10.1007/s11222-021-10011-z},
       URL = {https://doi.org/10.1007/s11222-021-10011-z},
}
```

## Bibtex databases

Q: what is a good source for bibtex entries?

. . .

1. [MathSciNet](https://mathscinet.ams.org/) (very clean, only Math)

2. [Zbmath](https://zbmath.org/) (does not require a subscription, almost as good as MathSciNet)

3. [arxiv](https://arxiv.org) (well, for papers only on arxiv)

4. [CrossRef](https://www.crossref.org) (all fields of science)

. . .

Avoid Google Scholar (low quality: missing accents, no DOI, etc.) or, worse, Semantic Scholar

## Author-year citations

```{latex}
\usepackage[authoryear]{natbib}
\bibliographystyle{apalike} % see natbib doc for other styles

. . . 

% where you want to insert the bibliography
\bibliography{./bib/my_biblio} % relative path

```

* narrative citation: `\citet{key}`. Tsybakov (2002) proved that ...

* parenthetical citation: `\citep{key}`. Such estimators are consistent
  (Tsybakov, 2002).

## Numeric citations

Simply replace option `optionyear` by `numbers`; add `square` if you want
citations like this: [3]. 

```{latex}
\usepackage[numbers, square]{natbib}
```

. . .

You can still use `\citet` and `\citep`:

* narrative citation: `\citet{key}`. Tsybakov [1] proved that ...

* parenthetical citation: `\citep{key}`. Such estimators are consistent [1].

## Bibliography tools

It is ok to keep adding references to the same bibtex over the years. When it
gets big, you may want to manage it through some dedicated **database** tool,
such as [jabref](https://www.jabref.org).

. . . 

Jabref treats your bibtex file as a reference database. A different approach is
to use a tool to manage your collection of papers, from which you can then
extract a bibtex file; see for instance [zotero](https://www.zotero.org/).

## A more modern version of bibtex / natbib

The combo bibtex (the program) + natbib (the package) may be replaced 
by [biber](https://ctan.org/pkg/biber) + [biblatex](https://ctan.org/pkg/biblatex).

Pros:

* unicode (UTF-8) support

* better sorting control

* many other features

. . .

Cons: 

* most journals still use bibtex + natbib

. . .

Personally, I use it only for my CV.

# CLI Tools you should know

## Compiling LaTeX (into a pdf)

Problem: to compile a LaTeX file with a bibliography, you are supposed to do:
```{bash}
pdflatex main.tex
pdflatex main.tex
bibtex main
pdflatex main.tex
```

. . .

Add a few more lines if you generate a glossary, a TOC, ...

## Solution: latexmk

`latexmk` is a Perl script that runs LaTeX (and friends) the correct number of
times. Simply run:

```{bash}
latexmk main.tex
```

. . .

You can also use it to clean intermediary files (useful before a git commit):
```{bash}
latexmk -c main.tex
```

. . . 

`latexmk` should already be available in your LaTeX distribution. By the way,
when you click "compile" on Overleaf, it runs `latexmk`.


## latexdiff to compare two versions of your paper

In other words, you want to **diff** the two files. 

```{bash}
latexdiff old.tex new.tex > diff.tex
latexmk diff.tex  # create the PDF showing the changes
```

![](figs/latexdiff.png){width=200%, fig-align="right"}

## A nice use case for `latexdiff`

Some authors submit the diff file during the revision process, to
help referees to spot more easily how the paper was updated.

# LaTeX and git

## Recommendations

* Only track **source** files (`*.tex`, `*.bib`, figures, etc.).
  Managing conflicts between output (`main.pdf`) or intermediary
  files (`main.log`, `main.aux`) is a pain.

* avoid working on the same file simultaneously if you are not comfortable with
  managing git conflicts. Good case for splitting the paper into multiple files
  (e.g., a file per section).

* use `.gitignore` to tell git to ignore intermediary files. (For pdf, make
  sure you don't ignore your figs). The github repo of this course contains 
  a `.gitignore` you can adapt to your needs.

# Other types of documents

## slides

The standard class to generate slides in LaTeX is [beamer](https://ctan.org/pkg/beamer).

```{latex}
\documentclass{beamer}
\title{My talk}
\author{My name}
\institute{University of Oxbridge}

\begin{document}

\frame{\titlepage}

\begin{frame}\frametitle{Title of first slide}
  \begin{itemize}
    \item First point
    \item Second point
  \end{itemize}
\end{frame}

\end{document}
```

## Use Quarto instead

The verbosity of LaTeX + beamer is really a pain, I strongly recommend you use
[quarto]() instead:

```{markdown}
---
title: My talk
author: My name
institute: University of Oxbridge
---

# First slide

* first point

* second point
```

. . .

Note that quarto can generate both PDF slides (using beamer) and HTML slides
(using revealjs). You are looking at quarto-generated slides, btw!

## CV 

see [moderncv](https://ctan.org/pkg/moderncv) or similar packages. 


# Conclusion, final recommendations

## Sane preamble

* as small as possible (package conflicts are not fun)

* you should understand each line

* semantic macros

. . .

I will send you a template which uses only the essential packages we have
already discussed.

## What to do next?

* register on [ORCID](https://orcid.org/)

* volunteer to submit your next collaborative paper on [arxiv](https://arxiv.org)

* Start reading the references given in the next slide

* Look into jabref, zotero, latexdiff, etc.

* When looking for on-line help, try first [tex stackexchange](https://tex.stackexchange.com).

## References

* Github repository for this course is [here](https://github.com/nchopin/best-practices-collaborative-latex);
  contains theses slides, a template paper, a `.gitignore` file you can re-use,
  etc.

* wikibooks has an excellent on-line book on LaTeX [here](https://en.wikibooks.org/wiki/LaTeX)

* package documentation on [CTAN](https://ctan.org);
  e.g. [natbib](https://ctan.org/pkg/natbib)

* [l2tabu](https://ctan.org/pkg/l2tabu-english), or the French version:
  [l2tabu-french](https://ctan.org/pkg/l2tabu-french)

* Nice cheatsheet [here](https://c-tan.com/download/latex_math_cheatsheet_2018-01-13.pdf).

## Only existing book on LaTeX for math

![](figs/cover_more_math_into_latex.jpg)


